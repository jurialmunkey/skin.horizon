<?xml version="1.0" encoding="UTF-8"?>
<includes>

    <!-- ============= -->
    <!-- View Mode IDs -->
    <!-- 50 List       -->
    <!-- 51 Icons      -->
    <!-- 52 Showcase   -->
    <!-- 53 Landscape  -->
    <!-- 54 Infolist 2 -->
    <!-- 55 Infolist   -->
    <!-- 56 Showcase 2 -->
    <!-- 57 Infolist 3 -->
    <!-- 58 Banner     -->
    <!-- ============= -->


    <include name="View_Layout">
        <control type="group">
            <include>View_Group</include>
            <include>View_Content</include>
        </control>
    </include>

    <include name="View_Group">
        <top>topbar_height</top>
        <left>86</left>
        <right>0</right>
    </include>

    <include name="View_Info_Poster">
        <control type="group">
            <include>View_Group</include>
            <visible>!Window.IsVisible(script-script.extendedinfo-DialogVideoInfo.xml) + !Window.IsVisible(script-script.extendedinfo-DialogInfo.xml)</visible>
            <include>Animation_Left_Delay</include>
            <include>Animation_Home_Textbar_Slideover_Library</include>
            <include>View_Library_Poster</include>
        </control>
    </include>

    <include name="View_NotTheseWindows">
        <visible>![Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRGuide.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml) | Window.IsVisible(MyPlaylist.xml)]</visible>
    </include>

    <include name="View_Library">
        <control type="group">
            <include>Animation_Right</include>
            <include>Defs_InfoDialog_Visible</include>
            <control type="group">
                <include>View_Library_AlphabetStrip</include>
                <include condition="![Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml)]">View_List</include>
                
                <include condition="![Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml)] + !Skin.HasSetting(WrapList)">View_Posters</include>

                <include condition="![Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml)] + Skin.HasSetting(WrapList)" content="View_Posters">
                    <param name="listtype" value="wraplist" />
                </include>

                <include condition="[Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml)]">View_List_PVR</include>
            </control>
        </control>
    </include>

    <include name="View_Library_AlphabetStrip">
        <control type="image">
            <width>80</width>
            <right>0</right>
            <texture colordiffuse="7f000000">common/white.png</texture>
        </control>
        <control type="image">
            <width>1</width>
            <right>80</right>
            <texture colordiffuse="highlight_bottombar">common/white.png</texture>
        </control>
        <control type="image">
            <width>1</width>
            <right>79</right>
            <texture colordiffuse="darkline_separator">common/white.png</texture>
        </control>
        <include condition="Window.IsVisible(MyPlaylist.xml) | Window.IsVisible(MyVideoNav.xml) | Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(AddonBrowser.xml) | Window.IsVisible(MyPics.xml) | Window.IsVisible(MyPrograms.xml) | [Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml)]">Object_AlphabetStrip</include>
    </include>

    <include name="View_Content">
        <control type="group">
            <include>Animation_Home_Textbar_Slideover_Library</include>
            <!-- Library Views -->
            <control type="group">
                <include condition="Window.IsVisible(MyPlaylist.xml) | Window.IsVisible(MyVideoNav.xml) | Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(AddonBrowser.xml) | Window.IsVisible(MyPics.xml) | Window.IsVisible(MyPrograms.xml) | [Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRRecordings.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRSearch.xml)]">View_Library</include>
            </control>

            <!-- Info List 2 -->
            <include>View_List_Info</include>

            <!-- Library Poster -->
            <control type="group">
                <control type="group">
                    <visible>Window.IsVisible(MyPlaylist.xml) | Window.IsVisible(MyVideoNav.xml) | Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(AddonBrowser.xml) | Window.IsVisible(MyPics.xml) | Window.IsVisible(MyPrograms.xml)</visible>
                    <include>Animation_Left</include>
                    <visible>![Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(DialogVideoInfo.xml) | Window.IsVisible(DialogMusicInfo.xml)]</visible>
                    <visible>!Window.IsVisible(script-script.extendedinfo-DialogVideoInfo.xml) + !Window.IsVisible(script-script.extendedinfo-DialogInfo.xml)</visible>
                    <control type="group">
                        <visible>Control.IsVisible(50) | Control.IsVisible(55)</visible>
                        <include>View_Library_Poster</include>
                    </control>
                </control>
            </control>
            
        </control>
    </include>

    <include name="View_Library_Poster">

        <!-- Music List -->
        <control type="group">
            <visible>[Container.Content(images) | Container.Content(artists) | Container.Content(albums) | Container.Content(addons) | Container.Content(songs) | Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(DialogMusicInfo.xml)]</visible>
            <control type="group">
                <width>view_left</width>
                <height>poster_height</height>
                <control type="image">
                    <include>Defs_Shadow_Opaque</include>
                    <texture colordiffuse="AAffffff">common/gradient-solid.png</texture>
                </control>
                <control type="group">
                    <left>40</left>
                    <right>40</right>
                    <top>40</top>
                    <bottom>40</bottom>
                    <control type="group">
                        <height>musicposter_width</height>
                        <control type="image">
                            <include>Defs_Shadow_Opaque</include>
                            <texture colordiffuse="PosterBack">common/white.png</texture>
                        </control>
                        <include content="Object_BigPoster">
                            <param name="discart" value="false" />
                            <param name="width" value="musicposter_width" />
                            <param name="height" value="musicposter_width" />
                            <param name="aspect" value="scale" />
                        </include>
                    </control>
                    <control type="group">
                        <top>musicposter_infotop</top>
                        <control type="image">
                            <height>1</height>
                            <top>0</top>
                            <texture colordiffuse="highlight_bottombar">common/white.png</texture>
                        </control>
                        <control type="image">
                            <height>1</height>
                            <top>-1</top>
                            <texture colordiffuse="darkline_separator">common/white.png</texture>
                        </control>
                        <control type="grouplist">
                            <top>30</top>
                            <align>center</align>
                            <usecontrolcoords>true</usecontrolcoords>
                            <orientation>vertical</orientation>
                            <control type="label">
                                <aligny>top</aligny>
                                <align>center</align>
                                <height>50</height>
                                <font>font_topbar</font>
                                <textcolor>main_fg_100</textcolor>
                                <label>$VAR[Label_MainTitle]</label>
                            </control>
                            <control type="label">
                                <label>$VAR[Label_SubTitle]</label>
                                <height>40</height>
                                <aligny>top</aligny>
                                <align>center</align>
                                <textcolor>$VAR[ColorHighlight]</textcolor>
                                <font>font_small</font>
                            </control>
                            <control type="textbox">
                                <top>20</top>
                                <label>$INFO[ListItem.AddonSummary]</label>
                                <height>80</height>
                                <aligny>center</aligny>
                                <align>center</align>
                                <textcolor>main_fg_70</textcolor>
                                <font>font_small</font>
                                <visible>[!Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(DialogAddonInfo.xml)] + !String.IsEmpty(ListItem.AddonSummary)</visible>
                            </control>
                            <include>Object_StarRating_Music</include>                            
                        </control>
                    </control>
                </control>
                <include>Object_Separator_Right</include>
            </control>
        </control>

        
        <!-- Large Poster -->
        <control type="group">
            <width>view_left</width>
            <visible>![Container.Content(images) | Container.Content(artists) | Container.Content(albums) | Container.Content(addons) | Container.Content(songs) | Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(DialogMusicInfo.xml)]</visible>
            <control type="group">
                <control type="image">
                    <include>Defs_Shadow_Opaque</include>
                    <texture colordiffuse="AAffffff">common/gradient-solid.png</texture>
                </control>
                <include content="Object_BigPoster">
                    <param name="discart" value="false" />
                </include>
                <include>Object_Separator_Right</include>
            </control>
        </control>
        
    </include>


    <include name="View_WatchedOverlay">
        <control type="image">
            <top>10</top>
            <right>10</right>
            <width>48</width>
            <height>48</height>
            <texture colordiffuse="ff000000">$VAR[Image_Overlay_Corner]</texture>
        </control>
        <control type="image">
            <top>11</top>
            <right>11</right>
            <width>24</width>
            <height>24</height>
            <texture>$VAR[Image_Overlay]</texture>
        </control>
        <control type="label">
            <top>10</top>
            <right>10</right>
            <width>28</width>
            <height>28</height>
            <font>font_unwatched</font>
            <align>center</align>
            <textcolor>ffcccccc</textcolor>
            <label>$INFO[ListItem.Property(UnWatchedEpisodes)]</label>
            <include>View_UnwatchedEpisodes_Visible</include>
        </control>
    </include>

    <include name="View_WatchedOverlay_Focus">
        <control type="image">
            <top>10</top>
            <right>10</right>
            <width>48</width>
            <height>48</height>
            <texture colordiffuse="$VAR[ColorHighlight]">$VAR[Image_Overlay_Corner]</texture>
        </control>
        <control type="image">
            <top>11</top>
            <right>11</right>
            <width>24</width>
            <height>24</height>
            <texture colordiffuse="ff000000">$VAR[Image_Overlay]</texture>
        </control>
        <control type="label">
            <top>10</top>
            <right>10</right>
            <width>28</width>
            <height>28</height>
            <font>font_unwatched</font>
            <align>center</align>
            <textcolor>Selected</textcolor>
            <label>$INFO[ListItem.Property(UnWatchedEpisodes)]</label>
            <include>View_UnwatchedEpisodes_Visible</include>
        </control>
    </include>

    <include name="View_UnwatchedEpisodes_Visible">
        <visible>Integer.IsGreater(ListItem.Property(UnWatchedEpisodes),0) + [Container.Content(tvshows) | Container.Content(seasons) | Window.IsVisible(Home)]</visible>
        <visible>![[[Container.Content(movies) + [String.IsEqual(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
        <visible>!ListItem.IsCollection</visible>
    </include>

    <include name="View_Selectbox">
        <animation type="Focus" condition="Skin.HasSetting(BounceAnimations)">
            <effect type="zoom" start="95" end="100" time="150" tween="sine" easing="inout" center="auto" />
            <effect type="fade" start="0" end="100" time="150" tween="sine" easing="in" />
        </animation>
        <animation type="Unfocus" condition="Skin.HasSetting(BounceAnimations)">
            <effect type="zoom" start="100" end="95" time="150" tween="sine" easing="inout" center="auto" />
            <effect type="fade" start="100" end="0" time="150" tween="sine" easing="out" />
        </animation>
        <include>View_WatchedOverlay_Focus</include>
        <control type="group">
            <left>3</left>
            <top>3</top>
            <right>3</right>
            <bottom>3</bottom>
            <control type="image">
                <texture colordiffuse="$VAR[ColorHighlight]" border="20">common/selectbox.png</texture>
            </control>
            <control type="image">
                <texture colordiffuse="$VAR[ColorHighlight2]" border="20">common/gradient-diffuse-selectbox.png</texture>
            </control>
        </control>
    </include>


    <include name="View_Position_Button">
        <control type="button">
            <visible allowhiddenfocus="true">false</visible>
            <onfocus condition="[String.IsEqual(ListItem.SortLetter,N) | String.IsEqual(ListItem.SortLetter,O) | String.IsEqual(ListItem.SortLetter,P) | String.IsEqual(ListItem.SortLetter,Q) | String.IsEqual(ListItem.SortLetter,R) | String.IsEqual(ListItem.SortLetter,S) | String.IsEqual(ListItem.SortLetter,T) | String.IsEqual(ListItem.SortLetter,U) | String.IsEqual(ListItem.SortLetter,V) | String.IsEqual(ListItem.SortLetter,W) | String.IsEqual(ListItem.SortLetter,X) | String.IsEqual(ListItem.SortLetter,Y) | String.IsEqual(ListItem.SortLetter,Z)] + Container(8001).HasNext">Control.Message(8099,pagedown)</onfocus>
            <onfocus condition="![String.IsEqual(ListItem.SortLetter,N) | String.IsEqual(ListItem.SortLetter,O) | String.IsEqual(ListItem.SortLetter,P) | String.IsEqual(ListItem.SortLetter,Q) | String.IsEqual(ListItem.SortLetter,R) | String.IsEqual(ListItem.SortLetter,S) | String.IsEqual(ListItem.SortLetter,T) | String.IsEqual(ListItem.SortLetter,U) | String.IsEqual(ListItem.SortLetter,V) | String.IsEqual(ListItem.SortLetter,W) | String.IsEqual(ListItem.SortLetter,X) | String.IsEqual(ListItem.SortLetter,Y) | String.IsEqual(ListItem.SortLetter,Z)] + Container(8001).HasPrevious">Control.Message(8099,pageup)</onfocus>
        </control>
    </include>

    <include name="View_Actor_Layout">
        <param name="id" default="9501" />
        <param name="label2" default="$INFO[ListItem.Label2]"/>
        <param name="infolabel" default="true" />
        <param name="itemwidth" default="226.8" />
        <definition>
            <left>-10</left>
            <top>70</top>
            <focusposition>2</focusposition>
            <movement>3</movement>
            <description>Plugin Content Widget</description>
            <height>381.2</height>
            <orientation>vertical</orientation>
            <onleft>$PARAM[id]</onleft>
            <onright>$PARAM[id]</onright>
            <include condition="!Window.IsVisible(DialogVideoInfo.xml)">View_Movement_Horizontal</include>
            <preloaditems>2</preloaditems>
            <pagecontrol>60</pagecontrol>
            <onfocus>SetProperty(ViewType,Square,Home)</onfocus>
            <scrolltime tween="quadratic">400</scrolltime>
            <itemlayout width="$PARAM[itemwidth]" height="330.2">
                <control type="group">
                    
                    <control type="image">
                        <bordersize>10</bordersize>
                        <include>Defs_Shadow_Small</include>
                        <aspectratio scalediffuse="false">scale</aspectratio>
                        <texture colordiffuse="main_fg_12">common/white.png</texture>
                    </control>

                    <!-- Poster -->
                    <control type="image">
                        <left>10</left>
                        <right>10</right>
                        <top>10</top>
                        <bottom>10</bottom>
                        <aspectratio scalediffuse="false">scale</aspectratio>
                        <texture fallback="DefaultArtist.png" background="true">$VAR[Image_Poster]</texture>
                    </control>
                    <control type="image">
                        <left>10</left>
                        <right>10</right>
                        <height>100</height>
                        <bottom>10</bottom>
                        <texture colordiffuse="bf000000">common/gradient-actor.png</texture>
                        <visible>$PARAM[infolabel]</visible>
                    </control>
                    <control type="label">
                        <left>20</left>
                        <right>20</right>
                        <height>30</height>
                        <bottom>42</bottom>
                        <align>left</align>
                        <aligny>center</aligny>
                        <font>font_statusbar</font>
                        <textcolor>main_fg_100</textcolor>
                        <label>$INFO[ListItem.Label]</label>
                        <visible>$PARAM[infolabel]</visible>
                    </control>
                    <control type="label">
                        <left>20</left>
                        <right>20</right>
                        <height>30</height>
                        <bottom>18</bottom>
                        <align>left</align>
                        <aligny>center</aligny>
                        <font>font_statusbar</font>
                        <textcolor>main_fg_70</textcolor>
                        <label>$PARAM[label2]</label>
                        <visible>$PARAM[infolabel]</visible>
                    </control>
                    <include>View_WatchedOverlay</include>
                </control>
            </itemlayout>
            <focusedlayout width="$PARAM[itemwidth]" height="330.2">
                <control type="group">
                    
                    <include>Animation_FocusBounce</include>
                    <control type="image">
                        <bordersize>10</bordersize>
                        <include>Defs_Shadow_Small</include>
                        <aspectratio scalediffuse="false">scale</aspectratio>
                        <texture colordiffuse="main_fg_12">common/white.png</texture>
                    </control>

                    <!-- Poster -->
                    <control type="image">
                        <left>10</left>
                        <right>10</right>
                        <top>10</top>
                        <bottom>10</bottom>
                        <aspectratio scalediffuse="false">scale</aspectratio>
                        <texture fallback="DefaultArtist.png" background="true">$VAR[Image_Poster]</texture>
                    </control>
                    <control type="image">
                        <left>10</left>
                        <right>10</right>
                        <height>100</height>
                        <bottom>10</bottom>
                        <visible>$PARAM[infolabel]</visible>
                        <texture colordiffuse="bf000000">common/gradient-actor.png</texture>
                    </control>
                    <control type="label">
                        <left>20</left>
                        <right>20</right>
                        <height>30</height>
                        <bottom>42</bottom>
                        <align>left</align>
                        <aligny>center</aligny>
                        <font>font_statusbar</font>
                        <textcolor>main_fg_100</textcolor>
                        <label>$INFO[ListItem.Label]</label>
                        <visible>$PARAM[infolabel]</visible>
                    </control>
                    <control type="label">
                        <left>20</left>
                        <right>20</right>
                        <height>30</height>
                        <bottom>18</bottom>
                        <align>left</align>
                        <aligny>center</aligny>
                        <font>font_statusbar</font>
                        <textcolor>main_fg_70</textcolor>
                        <label>$PARAM[label2]</label>
                        <visible>$PARAM[infolabel]</visible>
                    </control>
                    <include>View_WatchedOverlay</include>
                    <!-- Highlight -->
                    <control type="group">
                        <visible>Control.HasFocus($PARAM[id])</visible>
                        <include>View_Selectbox</include>
                    </control>
                </control>
            </focusedlayout>
        </definition>
    </include>

    <include name="View_Movement_Horizontal">
        <onright condition="Control.IsVisible(8000)">8000</onright>
        <onright condition="Control.IsVisible(60)">61</onright>
        <onright condition="!Control.IsVisible(8000) + !Control.IsVisible(60)">300</onright>
        <onleft condition="Control.IsVisible(300)">300</onleft>
    </include>

    <include name="View_Info_Movement">
        <onup>ClearProperty(FocusedList)</onup>
        <onup>SetFocus(9601)</onup>
        <ondown condition="!Control.HasFocus(50)">Select</ondown>
    </include>

    <include name="View_Forced">
        <visible>[Container.Content(movies) + [String.IsEqual(Skin.String(Skin.ForcedView.movies),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.movies)) ]] | [Container.Content(sets) + [String.IsEqual(Skin.String(Skin.ForcedView.sets),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.sets)) ]] | [Container.Content(tvshows) + [String.IsEqual(Skin.String(Skin.ForcedView.tvshows),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.tvshows)) ]] | [Container.Content(seasons) + [String.IsEqual(Skin.String(Skin.ForcedView.seasons),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.seasons)) ]] | [Container.Content(episodes) + [String.IsEqual(Skin.String(Skin.ForcedView.episodes),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.episodes)) ]] | [Container.Content(actors) + [String.IsEqual(Skin.String(Skin.ForcedView.actors),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.actors)) ]] | [Container.Content(artists) + [String.IsEqual(Skin.String(Skin.ForcedView.artists),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.artists)) ]] | [Container.Content(albums) + [String.IsEqual(Skin.String(Skin.ForcedView.albums),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.albums)) ]] | [Container.Content(songs) + [String.IsEqual(Skin.String(Skin.ForcedView.songs),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.songs)) ]] | [Container.Content(addons) + [String.IsEqual(Skin.String(Skin.ForcedView.addons),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.addons)) ]] | [Container.Content(genres) + [String.IsEqual(Skin.String(Skin.ForcedView.genres),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.genres)) ]] | [Container.Content(images) + [String.IsEqual(Skin.String(Skin.ForcedView.images),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.images)) ]] | [Container.Content(videos) + [String.IsEqual(Skin.String(Skin.ForcedView.videos),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.videos)) ]] | [Container.Content() + [String.IsEqual(Skin.String(Skin.ForcedView.),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.)) ]] | [Container.Content(tags) + [String.IsEqual(Skin.String(Skin.ForcedView.tags),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.tags)) ]] | [Container.Content(years) + [String.IsEqual(Skin.String(Skin.ForcedView.years),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.years)) ]] | [Container.Content(countries) + [String.IsEqual(Skin.String(Skin.ForcedView.countries),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.countries)) ]] | [Container.Content(studios) + [String.IsEqual(Skin.String(Skin.ForcedView.studios),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.studios)) ]] | [Container.Content(playlists) + [String.IsEqual(Skin.String(Skin.ForcedView.playlists),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.playlists)) ]] | [Container.Content(musicvideos) + [String.IsEqual(Skin.String(Skin.ForcedView.musicvideos),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos)) ]] | [Container.Content(directors) + [String.IsEqual(Skin.String(Skin.ForcedView.directors),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.directors)) ]] | [Container.Content(files) + [String.IsEqual(Skin.String(Skin.ForcedView.files),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.files)) ]] | [Container.Content(mixed) + [String.IsEqual(Skin.String(Skin.ForcedView.mixed),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.mixed)) ]] | [Container.Content(unknown) + [String.IsEqual(Skin.String(Skin.ForcedView.unknown),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.unknown)) ]]</visible>
    </include>

</includes>

